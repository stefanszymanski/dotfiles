# Identifying the editing mode {{{1

autoload -Uz add-zsh-hook
autoload -Uz add-zle-hook-widget

# Compatibility with old variable names
(( $+MODE_INDICATOR_I )) && : ${MODE_INDICATOR_VIINS=MODE_INDICATOR_I}
(( $+MODE_INDICATOR_N )) && : ${MODE_INDICATOR_VICMD=MODE_INDICATOR_N}
(( $+MODE_INDICATOR_C )) && : ${MODE_INDICATOR_SEARCH=MODE_INDICATOR_C}

typeset -g -a vim_mode_keymap_funcs=()

vim-mode-precmd           () { vim-mode-handle-event precmd           "$KEYMAP" }
add-zsh-hook precmd vim-mode-precmd

vim-mode-isearch-update   () { vim-mode-handle-event isearch-update   "$KEYMAP" }
vim-mode-isearch-exit     () { vim-mode-handle-event isearch-exit     "$KEYMAP" }
vim-mode-line-pre-redraw  () { vim-mode-handle-event line-pre-redraw  "$KEYMAP" }

() {
    local w; for w in "$@"; do add-zle-hook-widget $w vim-mode-$w; done
} isearch-exit isearch-update line-pre-redraw

typeset -g vim_mode_keymap_state=

vim-mode-handle-event () {
    #${(%):-%x}_debug "handle-event [${(qq)@}][cur:${VIM_MODE_KEYMAP}]"

    local hook="$1"
    local keymap="$2"

    case $hook in
    line-pre-redraw )
        # This hook is called (maybe several times) on every action except
        # for the initial prompt drawing
        case $vim_mode_keymap_state in
        '' )
            vim_mode_set_keymap "$keymap"
            ;;
        *-escape )
            vim_mode_set_keymap "${vim_mode_keymap_state%-escape}"
            vim_mode_keymap_state=
            ;;
        *-update )
            # Normal update in isearch mode
            vim_mode_keymap_state=${vim_mode_keymap_state%-update}
            vim_mode_set_keymap isearch
            ;;
        * )
            # ^C was hit during isearch mode!
            vim_mode_set_keymap "$vim_mode_keymap_state"
            vim_mode_keymap_state=
            ;;
        esac
        ;;
    isearch-update )
        if [[ $keymap = vicmd ]]; then
            # This is an abnormal exit from search (like <Esc>)
            vim_mode_keymap_state+='-escape'
        elif [[ $VIM_MODE_KEYMAP != isearch ]]; then
            # Normal update, starting search mode
            vim_mode_keymap_state=${VIM_MODE_KEYMAP}-update
        else
            # Normal update, staying in search mode
            vim_mode_keymap_state+=-update
        fi
        ;;
    isearch-exit )
        if [[ $VIM_MODE_KEYMAP = isearch ]]; then
            # This could be a normal (movement key) exit, but it could also
            # be ^G which behaves almost like <Esc>. So don't trust $keymap.
            vim_mode_keymap_state+='-escape'
        fi

        # Otherwise, we already exited search via abnormal isearch-update,
        # so there is nothing to do here.
        ;;
    precmd )
        # When the prompt is first shown line-pre-redraw does not get called
        # so the state must be initialized here
        vim_mode_keymap_state=
        vim_mode_set_keymap viins
        ;;
    * )
        # Should not happen
        zle && zle -M "zsh-vim-mode internal error: bad hook $hook"
        ;;
    esac
}

vim_mode_set_keymap () {
    local keymap="$1"

    [[ $keymap = main || $keymap = '' ]] && keymap=viins

    if [[ $keymap = vicmd ]]; then
        local active=${REGION_ACTIVE:-0}
        if [[ $active = 1 ]]; then
            keymap=visual
        elif [[ $active = 2 ]]; then
            keymap=vline
        fi
    elif [[ $keymap = viins ]]; then
        [[ $ZLE_STATE = *overwrite* ]] && keymap=replace
    fi

    #${(%):-%x}_debug "     -> $keymap"

    [[ $VIM_MODE_KEYMAP = $keymap ]] && return

    # Can be used by prompt themes, etc.
    VIM_MODE_KEYMAP=$keymap

	local func
    for func in ${vim_mode_keymap_funcs[@]}; do
        ${func} "$keymap"
    done
}


# Editing mode indicator - Prompt string {{{1

# Unique prefix to tag the mode indicator text in the prompt.
# If ZLE_RPROMPT_INDENT is < 1, zle gets confused if $RPS1 isn't empty but
# printing it doesn't move the cursor.
(( ${ZLE_RPROMPT_INDENT:-1} > 0 )) \
    && vim_mode_indicator_pfx="%837(l,,)" \
    || vim_mode_indicator_pfx="%837(l,, )"

# If mode indicator wasn't setup by theme, define default
vim-mode-set-up-indicators () {
    local indicator=${MODE_INDICATOR_VICMD-${MODE_INDICATOR-DEFAULT}}
    local set=$((
        $+MODE_INDICATOR_VIINS +
        $+MODE_INDICATOR_REPLACE +
        $+MODE_INDICATOR_VICMD +
        $+MODE_INDICATOR_SEARCH +
        $+MODE_INDICATOR_VISUAL +
        $+MODE_INDICATOR_VLINE))

    if [[ -n $indicator || $set > 0 ]]; then
        if (( ! $set )); then
            if [[ $indicator = DEFAULT ]]; then
                MODE_INDICATOR_VICMD='%F{10}<%F{2}<<%f'
                MODE_INDICATOR_REPLACE='%F{9}<%F{1}*<%f'
                MODE_INDICATOR_SEARCH='%F{13}<%F{5}?<%f'
                MODE_INDICATOR_VISUAL='%F{12}<%F{4}-<%f'
                MODE_INDICATOR_VLINE='%F{12}<%F{4}=<%f'
            else
                MODE_INDICATOR_VICMD=$indicator
            fi

            # Replace / Search indicator defaults to viins
            (( $+MODE_INDICATOR_VIINS )) && \
                : ${MODE_INDICATOR_REPLACE=$MODE_INDICATOR_VIINS}
            (( $+MODE_INDICATOR_VIINS )) && \
                : ${MODE_INDICATOR_SEARCH=$MODE_INDICATOR_VIINS}

            # Visual indicator defaults to vicmd
            (( $+MODE_INDICATOR_VICMD )) && \
                : ${MODE_INDICATOR_VISUAL=$MODE_INDICATOR_VICMD}
            (( $+MODE_INDICATOR_VISUAL )) && \
                : ${MODE_INDICATOR_VLINE=$MODE_INDICATOR_VISUAL}

            MODE_INDICATOR_PROMPT=${vim_mode_indicator_pfx}${MODE_INDICATOR_VIINS}

            if (( !$+RPS1 )); then
                [[ -o promptsubst ]] \
                    && RPS1='${MODE_INDICATOR_PROMPT}' \
                    || RPS1="$MODE_INDICATOR_PROMPT"
            fi
        fi
    else
        unset MODE_INDICATOR_PROMPT
    fi
}

vim-mode-update-prompt () {
	# delegate the rerendering of the prompt
    zle && zle vi-mode-change	
}

vim_mode_keymap_funcs+=vim-mode-update-prompt


# Editing mode indicator - Cursor shape {{{1
#
# Compatibility with old variable names
(( $+ZSH_VIM_MODE_CURSOR_VIINS )) \
    && : ${MODE_CURSOR_VIINS=ZSH_VIM_MODE_CURSOR_VIINS}
(( $+ZSH_VIM_MODE_CURSOR_VICMD )) \
    && : ${MODE_CURSOR_VICMD=ZSH_VIM_MODE_CURSOR_VICMD}
(( $+ZSH_VIM_MODE_CURSOR_ISEARCH )) \
    && : ${MODE_CURSOR_SEARCH=ZSH_VIM_MODE_CURSOR_ISEARCH}
(( $+ZSH_VIM_MODE_CURSOR_DEFAULT )) \
    && : ${MODE_CURSOR_DEFAULT=ZSH_VIM_MODE_CURSOR_DEFAULT}

# You may want to set this to '', if your cursor stops blinking
# when you didn't ask it to. Some terminals, e.g., xterm, don't blink
# initially but do blink after the set-to-default sequence. So this
# forces it to steady, which should match most default setups.
: ${MODE_CURSOR_DEFAULT:=steady}

send-terminal-sequence() {
    local sequence="$1"
    local is_tmux

    # Allow forcing TMUX_PASSTHROUGH on. For example, if running tmux locally and
    # running zsh remotely, where $TMUX is not set (and shouldn't be).
    if [[ -n $TMUX_PASSTHROUGH ]] || [[ -n $TMUX ]]; then
        is_tmux=1
    fi

    if [[ -n $is_tmux ]]; then
        # Double each escape (see zshbuiltins(1) echo for backslash escapes)
        # And wrap it in the TMUX DCS passthrough
        sequence=${sequence//\\(e|x27|033|u001[bB]|U0000001[bB])/\\e\\e}
        sequence="\ePtmux;$sequence\e\\"
    fi
    print -n "$sequence"
}

set-terminal-cursor-style() {
    local steady=
    local shape=
    local color=

    for setting in ${=MODE_CURSOR_DEFAULT} "$@"; do
        case $setting in
            blinking)  steady=0 ;;
            steady)    steady=1 ;;
            block)     shape=1 ;;
            underline) shape=3 ;;
            beam|bar)  shape=5 ;;
            *)         color="$setting" ;;
        esac
    done

    # OSC Ps ; Pt BEL
    #   Ps = 1 2  -> Change text cursor color to Pt.
    #   Ps = 1 1 2  -> Reset text cursor color.

    if [[ -z $color ]]; then
        # Reset cursor color
        send-terminal-sequence "\e]112\a"
    else
        # Note: Color is "specified by name or RGB specification as per
        # XParseColor", according to XTerm docs
        send-terminal-sequence "\e]12;${color}\a"
    fi

    # CSI Ps SP q
    #   Set cursor style (DECSCUSR), VT520.
    #     Ps = 0  -> blinking block.
    #     Ps = 1  -> blinking block (default).
    #     Ps = 2  -> steady block.
    #     Ps = 3  -> blinking underline.
    #     Ps = 4  -> steady underline.
    #     Ps = 5  -> blinking bar (xterm).
    #     Ps = 6  -> steady bar (xterm).

    if [[ -z $steady && -z $shape ]]; then
        send-terminal-sequence "\e[0 q"
    else
        [[ -z $shape ]] && shape=1
        [[ -z $steady ]] && steady=1
        send-terminal-sequence "\e[$((shape + steady)) q"
    fi
}

vim-mode-set-cursor-style() {
    local keymap="$1"

    if [[ -n $MODE_CURSOR_VICMD \
       || -n $MODE_CURSOR_VIINS \
       || -n $MODE_CURSOR_SEARCH ]]
    then
        case $keymap in
            DEFAULT)      set-terminal-cursor-style ;;
            vicmd|visual|vline)
                          set-terminal-cursor-style ${=MODE_CURSOR_VICMD} ;;
            isearch)      set-terminal-cursor-style ${=MODE_CURSOR_SEARCH} ;;
            main|viins|*) set-terminal-cursor-style ${=MODE_CURSOR_VIINS} ;;
        esac
    fi
}

vim-mode-cursor-init-hook() {
    vim-mode-set-cursor-style viins
}

vim-mode-cursor-finish-hook() {
    vim-mode-set-cursor-style DEFAULT
}

if [[ $TERM = (dumb|linux|eterm-color) ]] || (( $+KONSOLE_PROFILE_NAME )); then
    :
else
    vim_mode_keymap_funcs+=vim-mode-set-cursor-style

    add-zsh-hook        precmd      vim-mode-cursor-init-hook
    add-zle-hook-widget line-finish vim-mode-cursor-finish-hook
fi
