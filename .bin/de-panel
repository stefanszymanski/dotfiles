#!/usr/bin/env bash
#
# Run desktop panels.
#
# This script is part of my custom desktop environment. It may not work outside
# of this context.
#
# This script requires `lemonbar`, `bspc`, `slsstatus`, `pactl` and `xdo`.
# It expects ~/.panel-colors to contain certain variables. See code for details.
#
# Author: Stefan Szymanski <stefan.szymanski@posteo.de>
# Date: 2021-01-20
# Licence: MIT

PANEL_FIFO=/tmp/panel-fifo
PANEL_HEIGHT=18
PANEL_FONT="monospace:size=10:weight=bold"
PANEL_WM_NAME=bspwm_panel

# if xdo id -a "$PANEL_WM_NAME" > /dev/null ; then
#     printf "%s\n" "The panel is already running." >&2
#     exit 1
# fi

# kill child process when parent terminates
# FIXME according to the logs, sometimes there aren't any child processes and kill fails.
trap 'trap - TERM; kill $(jobs -p)' INT TERM QUIT EXIT

# load colors
. "$HOME/.panel-colors"

# get name, dimension and position of connected monitors
IFS=$'\n' read -d "" -ra monitors <<< "$(bspc wm --dump-state | jq -r '.monitors | .[] | [.name, .rectangle.width, .rectangle.height, .rectangle.x, .rectangle.y] | join(" ")')"

# create a panel for each monitor
# TODO move offset variable to shared file or make it an environment variable
o=4
PANEL_FIFOS=()
for monitor in "${monitors[@]}"; do
    # calculate panel dimension and position
    IFS=$' ' read -d "" -r name w h x y <<< "$monitor"

    layout="$(de-config get "panel.monitors" ".$name")"
    [ "$layout" == "null" ] && continue

    ((w=w-(o*2)))
    ((x=x+o))
    ((y=y+(o)))
    h="$PANEL_HEIGHT"
    geometry="${w}x${h}+${x}+${y}"

    # create a FIFO file
    panel_fifo="${PANEL_FIFO}_${name}"
    [ -e "$panel_fifo" ] && rm "$panel_fifo"
    mkfifo "$panel_fifo"
    PANEL_FIFOS+=("$panel_fifo")

    # create panel
    panel_wm_name="${PANEL_WM_NAME}_${name}"
    de-panel-bar "$name" "$layout" < "$panel_fifo" | lemonbar \
        -n "$panel_wm_name" \
        -g "$geometry" \
        -f "$PANEL_FONT" \
        -o "1" \
        -F "$COLOR_DEFAULT_FG" \
        -B "$COLOR_DEFAULT_BG" | sh &

    # place panel above root window
    winid=$(xdo id -m -a "${panel_wm_name}")
    rootid=$(xdo id -N Bspwm -n root | sort | head -n 1)
    xdo above -t "$rootid" "$winid"
done

# fill panels with data

# periodically updated information
slstatus -s | de-panel-send &

# bspwm state
bspc subscribe report | de-panel-send &

# pulseaudio default sink and source volume
latest_vol=""
update_pa() {
    cur_vol="$(de-pulseaudio panel)"
    if [[ "$cur_vol" != "$latest_vol" ]]; then
        latest_vol="$cur_vol"
        de-panel-send "V${cur_vol}"
    fi
}
pactl subscribe | grep --line-buffered -E "(sink|source)" | while IFS= read -r line; do
    update_pa
done &

update_pa &

de-backlight update &

jobs -p
wait
