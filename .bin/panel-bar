#!/usr/bin/env bash

target_monitor="$1"

. "$HOME/.panel-colors"

render_blue_block() {
    local res bg fg
    [ -z "$1" ] && exit
    if [ "$2" -eq 1 ]; then
        fg="$COLOR_DESKTOP_LAYOUT_FOCUSED_FG"
        bg="$COLOR_DESKTOP_LAYOUT_FOCUSED_BG"
    else
        fg="$COLOR_DESKTOP_LAYOUT_FG"
        bg="$COLOR_DESKTOP_LAYOUT_BG"
    fi
    res="%{F${fg}}%{B${bg}} $1 %{B-}%{F-}"
    printf "%s\n" "$res"
}

render_desktop() {
    local res
    local name="${1#?}"
    local index="$2"
    case "$1" in
        O*)
            fg="$COLOR_DESKTOP_OCCUPIED_FOCUSED_FG"
            bg="$COLOR_DESKTOP_OCCUPIED_FOCUSED_BG"
            ;;
        o*)
            fg="$COLOR_DESKTOP_OCCUPIED_FG"
            bg="$COLOR_DESKTOP_OCCUPIED_BG"
            ;;
        F*)
            fg="$COLOR_DESKTOP_FREE_FOCUSED_FG"
            bg="$COLOR_DESKTOP_FREE_FOCUSED_BG"
            ;;
        f*)
            fg="$COLOR_DESKTOP_FREE_FG"
            bg="$COLOR_DESKTOP_FREE_BG"
            ;;
        U*)
            fg="$COLOR_DESKTOP_URGENT_FOCUSED_FG"
            bg="$COLOR_DESKTOP_URGENT_FOCUSED_BG"
            ;;
        u*)
            fg="$COLOR_DESKTOP_URGENT_FG"
            bg="$COLOR_DESKTOP_URGENT_BG"
            ;;
    esac
    printf "%s\n" "%{F${fg}}%{B${bg}} ${index} | ${name} %{B-}%{F-}"
}

render_volume() {
    local res="$1 $2"
    [[ "$3" == "off" ]] && res="$res muted"
    printf "%s\n" "$(render_block "$res")"
}

render_block() {
    [ -z "$1" ] && exit
    local fg bg
    fg="$COLOR_BLOCK_FG"
    bg="$COLOR_BLOCK_BG"
    res="%{F${fg}}%{B${bg}} ${1} %{B-}%{F-}"
    printf "%s\n" "$res"
}

while read -r line ; do
    [[ -z "$line" ]] && continue
    # parse input
    case $line in
        L*)
            load="$(render_block "${line#?}")"
            ;;
        D*)
            date="$(render_block "${line#?}")"
            ;;
        M*)
            mem="$(render_block "${line#?}")"
            ;;
        T*)
            temp="$(render_block "${line#?}")"
            ;;
        V*)
            IFS=$' ' read -r chn vol muted <<< "${line#?}"
            case "$chn" in
                Master) vmaster="$(render_volume "vol" "$vol" "$muted")";;
                Mic) vmic="$(render_volume "mic" "$vol" "$muted")";;
            esac
            ;;
        W*)
            desktops=()
            mons=
            test="$line"
            IFS=':'
            set -- ${line#?}
            while [ $# -gt 0 ] ; do
                # item=${1#?}
                item="$1"
                name="${item#?}"
                case "$item" in
                    [mM]*)
                        monitor_name="$name"
                        [[ "$monitor_name" != "$target_monitor" ]] && shift && continue
                        case "$item" in
                            m*) is_monitor_active=0;;
                            M*) is_monitor_active=1;;
                        esac
                        ;;
                    [oOfFuULTG]*)
                        [[ "$monitor_name" != "$target_monitor" ]] && shift && continue
                        case "$item" in
                            [oOfFuU]*) desktops+=("$item");;
                            L*) desktop_layout="$name";;
                            T*) node_state="$name";;
                            G*) node_flags="$name";;
                        esac
                        ;;
                esac
                shift
            done
            dl="$(render_blue_block "$desktop_layout" "$is_monitor_active")"
            nl="$(render_blue_block "$node_state" "$is_monitor_active")"
            nf="$(render_blue_block "$node_flags" "$is_monitor_active")"
            ds=
            index=1
            for desktop in "${desktops[@]}"; do
                ds="${ds} $(render_desktop "${desktop}" "${index}")"
                ((index+=1))
            done
            ;;
        # *) test="$line";;
    esac

    printf "%s\n" "%{l}${dl}${nl}${nf} ${ds} %{r}${vmaster} ${vmic} ${load} ${mem} ${temp} ${date}"
done
