#!/usr/bin/env bash

target_monitor="$1"
layout="${2:-minimal}"

. "$HOME/.panel-colors"

render_blue_block() {
    local res bg fg
    [ -z "$1" ] && exit
    if [ "$2" -eq 1 ]; then
        fg="$COLOR_DESKTOP_LAYOUT_FOCUSED_FG"
        bg="$COLOR_DESKTOP_LAYOUT_FOCUSED_BG"
    else
        fg="$COLOR_DESKTOP_LAYOUT_FG"
        bg="$COLOR_DESKTOP_LAYOUT_BG"
    fi
    res="%{F${fg}}%{B${bg}} $1 %{B-}%{F-}"
    printf "%s\n" "$res"
}

render_desktop() {
    local res
    local name="${1#?}"
    local index="$2"
    case "$1" in
        O*)
            fg="$COLOR_DESKTOP_OCCUPIED_FOCUSED_FG"
            bg="$COLOR_DESKTOP_OCCUPIED_FOCUSED_BG"
            ;;
        o*)
            fg="$COLOR_DESKTOP_OCCUPIED_FG"
            bg="$COLOR_DESKTOP_OCCUPIED_BG"
            ;;
        F*)
            fg="$COLOR_DESKTOP_FREE_FOCUSED_FG"
            bg="$COLOR_DESKTOP_FREE_FOCUSED_BG"
            ;;
        f*)
            fg="$COLOR_DESKTOP_FREE_FG"
            bg="$COLOR_DESKTOP_FREE_BG"
            ;;
        U*)
            fg="$COLOR_DESKTOP_URGENT_FOCUSED_FG"
            bg="$COLOR_DESKTOP_URGENT_FOCUSED_BG"
            ;;
        u*)
            fg="$COLOR_DESKTOP_URGENT_FG"
            bg="$COLOR_DESKTOP_URGENT_BG"
            ;;
    esac
    printf "%s\n" "%{F${fg}}%{B${bg}} ${index} | ${name} %{B-}%{F-}"
}

render_volumes() {
    local red="#d5443e"
    local -a vols
    local joined
    while [ "$#" -gt 0 ]; do
        vol="$1"
        [[ "$2" == "yes" ]] && vol="%{F${red}}${vol}%{F-}"
        vols+=("$vol")
        shift 2
    done
    printf -v joined '%s / ' "${vols[@]}"
    printf "%s\n" "$(render_block "volume ${joined% / }")"
}

render_temps() {
    local fg_crit="#d5443e"
    local fg_warn="#fe8019"
    local -a temps
    local joined
    while [ "$#" -gt 0 ]; do
        temp="$1"
        case "$2" in
            warn) temp="%{F${fg_warn}}${temp}%{F-}" ;;
            crit) temp="%{F${fg_crit}}${temp}%{F-}" ;;
            *) ;;
        esac
        temps+=("$temp")
        shift 2
    done
    printf -v joined '%s / ' "${temps[@]}"
    printf "%s\n" "$(render_block "temp ${joined% / }")"
}

render_load() {
    local fg_crit="#d5443e"
    local fg_warn="#fe8019"
    local -a loads
    local load cores joined
    cores="$(nproc)"
    while [ "$#" -gt 0 ]; do
        load="$1"
        if [ "${load%.*}" -ge "$((cores*2))" ]; then
            load="%{F${fg_crit}}${load}%{F-}"
        elif [ "${load%.*}" -ge "$cores" ]; then
            load="%{F${fg_warn}}${load}%{F-}"
        fi
        loads+=("$load")
        shift
    done
    printf -v joined '%s ' "${loads[@]}"
    printf "%s\n" "$(render_block "load ${joined% }")"
}

render_date_block() {
    [ -z "$1" ] && exit
    local fg bg
    fg="$COLOR_DATE_FG"
    bg="$COLOR_DATE_BG"
    res="%{F${fg}}%{B${bg}} ${1} %{B-}%{F-}"
    [ -n "$res" ] && printf " %s\n" "$res"
}

render_disabled() {
    local bg fg
    bg="$COLOR_DISABLED_BG"
    fg="$COLOR_DISABLED_FG"
    [ -n "$1" ] && printf " %s\n" "%{F${fg}}%{B${bg}} $1 %{B-}%{F-}"
}

render_block() {
    [ -z "$1" ] && exit
    local fg bg
    fg="$COLOR_BLOCK_FG"
    bg="$COLOR_BLOCK_BG"
    res="%{F${fg}}%{B${bg}} ${1} %{B-}%{F-}"
    [ -n "$res" ] && printf " %s\n" "$res"
}

this_or_empty() {
    [ "$1" == "$2" ] && printf "%s\n" "$3"
}

declare -A disabled_features

while read -r line ; do
    [[ -z "$line" ]] && continue
    # parse input
    case $line in
        L*)
            IFS=$' ' read -ra args <<< "${line#?}"
            load="$(render_load "${args[@]}")"
            ;;
        D*)
            date="$(render_date_block "${line#?}")"
            ;;
        M*)
            mem="$(render_block "${line#?}")"
            ;;
        T*)
            IFS=$' ' read -ra args <<< "${line#?}"
            temp="$(render_temps "${args[@]}")"
            ;;
        N*)
            mail="$(render_block "${line#?}")"
            ;;
        V*)
            IFS=$' ' read -ra args <<< "${line#?}"
            volumes="$(render_volumes "${args[@]}")"
            ;;
        B*)
            bat="$(render_block "${line#?}")"
            ;;
        C*)
            backlight="$(render_block "${line#?}")"
            ;;
        A*) 
            disabled_features[notifications]="$(this_or_empty "${line#?}" "true" "notifications")"
            ;;
        W*)
            desktops=()
            IFS=':'
            set -- ${line#?}
            current_monitor=""
            while [ $# -gt 0 ] ; do
                # item=${1#?}
                item="$1"
                name="${item#?}"
                case "$item" in
                    [mM]*)
                        current_monitor="$name"
                        [[ "$current_monitor" != "$target_monitor" ]] && shift && continue
                        case "$item" in
                            m*) is_monitor_active=0;;
                            M*) is_monitor_active=1;;
                        esac
                        ;;
                    [oOfFuULTG]*)
                        [[ "$current_monitor" != "$target_monitor" ]] && shift && continue
                        case "$item" in
                            [oOfFuU]*) desktops+=("$item");;
                            L*) desktop_layout="$name";;
                            T*) node_state="$name";;
                            G*) node_flags="$name";;
                        esac
                        ;;
                esac
                shift
            done
            dl="$(render_blue_block "$desktop_layout" "$is_monitor_active")"
            nl="$(render_blue_block "$node_state" "$is_monitor_active")"
            nf="$(render_blue_block "$node_flags" "$is_monitor_active")"
            ds=
            index=1
            for desktop in "${desktops[@]}"; do
                ds="${ds} $(render_desktop "${desktop}" "${index}")"
                ((index+=1))
            done
            ;;
    esac

    disabled="$(render_disabled "${disabled_features[notifications]}")"

    case "$layout" in
        minimal)
            printf "%s\n" "%{l}${dl}${nl}${nf} ${ds}"
            ;;
        full)
            printf "%s\n" "%{l}${dl}${nl}${nf} ${ds} %{r}${volumes}${backlight}${mail}${load}${mem}${temp}${bat}${disabled}${date}"
            ;;
        *) 
            printf "%s\n" "Unknown layout: $layout"
            ;;
    esac
done
