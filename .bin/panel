#!/usr/bin/env bash

PANEL_FIFO=/tmp/panel-fifo
PANEL_HEIGHT=18
PANEL_FONT="monospace:size=10:weight=bold"
PANEL_WM_NAME=bspwm_panel

# if xdo id -a "$PANEL_WM_NAME" > /dev/null ; then
#     printf "%s\n" "The panel is already running." >&2
#     exit 1
# fi

# kill child process when parent terminates
trap 'trap - TERM; kill $(jobs -p)' INT TERM QUIT EXIT

# create FIFO file for external updates
# written to by script .bin/panel-updates
UPDATE_FIFO="/tmp/panel-fifo-updates"
[ -e "$UPDATE_FIFO" ] && rm "$UPDATE_FIFO"
mkfifo "$UPDATE_FIFO"

# load colors
. "$HOME/.panel-colors"

# get name, dimension and position of connected monitors
IFS=$'\n' read -d "" -ra monitors <<< "$(xrandr --current | awk '$2 ~ /connected/ && /[0-9]+x[0-9]+/ {print $1, $3}')"

# create a panel for each monitor
# TODO move offset variable to shared file or make it an environment variable
o=12
PANEL_FIFOS=()
for monitor in "${monitors[@]}"; do
    # calculate panel dimension and position
    IFS=$' ' read -d "" -r name w h x y <<< "$(awk -F'[ x+]' '{print $1, $2, $3, $4, $5}' <<< "$monitor")"
    ((w=w-(o*2)))
    ((x=x+o))
    ((y=y+(o/2)))
    h="$PANEL_HEIGHT"
    geometry="${w}x${h}+${x}+${y}"

    # create a FIFO file
    panel_fifo="${PANEL_FIFO}_${name}"
    [ -e "$panel_fifo" ] && rm "$panel_fifo"
    mkfifo "$panel_fifo"
    PANEL_FIFOS+=("$panel_fifo")

    # create panel
    # panel_fifo="${PANEL_FIFO}_${name}"
    panel_wm_name="${PANEL_WM_NAME}_${name}"
    panel-bar "$name" < "$panel_fifo" | lemonbar \
        -n "$panel_wm_name" \
        -g "$geometry" \
        -f "$PANEL_FONT" \
        -o "1" \
        -F "$COLOR_DEFAULT_FG" \
        -B "$COLOR_DEFAULT_BG" | sh &

    # place panel above root window
    winid=$(xdo id -m -a "${panel_wm_name}")
    rootid=$(xdo id -N Bspwm -n root | sort | head -n 1)
    xdo above -t "$rootid" "$winid"
done

# fill panels with data
# trap "kill $$" SIGINT trap 'kill -HUP 0' EXIT trap 'kill $(jobs -p)' EXIT
slstatus -s | tee "${PANEL_FIFOS[@]}" &
bspc subscribe report | tee "${PANEL_FIFOS[@]}" &
while read -r line < "$UPDATE_FIFO"; do
    printf "%s\n" "${2}${line}" | tee "${PANEL_FIFOS[@]}"
done &
panel-update all

jobs -p

wait
