#!/usr/bin/env bash

PANEL_FIFO=/tmp/panel-fifo
PANEL_HEIGHT=18
PANEL_FONT="monospace:size=10:weight=bold"
PANEL_WM_NAME=bspwm_panel

# if xdo id -a "$PANEL_WM_NAME" > /dev/null ; then
#     printf "%s\n" "The panel is already running." >&2
#     exit 1
# fi

# kill child process when parent terminates
# FIXME according to the logs, sometimes there aren't any child processes and kill fails.
trap 'trap - TERM; kill $(jobs -p)' INT TERM QUIT EXIT

# load colors
. "$HOME/.panel-colors"

# get name, dimension and position of connected monitors
IFS=$'\n' read -d "" -ra monitors <<< "$(xrandr --current | awk '$2 ~ /connected/ && /[0-9]+x[0-9]+/ {print $1, $3}')"

# create a panel for each monitor
# TODO move offset variable to shared file or make it an environment variable
o=4
PANEL_FIFOS=()
monitor_index=0
for monitor in "${monitors[@]}"; do
    ((monitor_index++))
    # calculate panel dimension and position
    IFS=$' ' read -d "" -r name w h x y <<< "$(awk -F'[ x+]' '{print $1, $2, $3, $4, $5}' <<< "$monitor")"
    ((w=w-(o*2)))
    ((x=x+o))
    ((y=y+(o)))
    h="$PANEL_HEIGHT"
    geometry="${w}x${h}+${x}+${y}"

    # create a FIFO file
    panel_fifo="${PANEL_FIFO}_${name}"
    [ -e "$panel_fifo" ] && rm "$panel_fifo"
    mkfifo "$panel_fifo"
    PANEL_FIFOS+=("$panel_fifo")

    # create panel
    # panel_fifo="${PANEL_FIFO}_${name}"
    panel_wm_name="${PANEL_WM_NAME}_${name}"
    panel-bar "$monitor_index" < "$panel_fifo" | lemonbar \
        -n "$panel_wm_name" \
        -g "$geometry" \
        -f "$PANEL_FONT" \
        -o "1" \
        -F "$COLOR_DEFAULT_FG" \
        -B "$COLOR_DEFAULT_BG" | sh &

    # place panel above root window
    winid=$(xdo id -m -a "${panel_wm_name}")
    rootid=$(xdo id -N Bspwm -n root | sort | head -n 1)
    xdo above -t "$rootid" "$winid"
done

# fill panels with data

# periodically updated information
slstatus -s | tee "${PANEL_FIFOS[@]}" > /dev/null &
# bspwm state
bspc subscribe report | tee "${PANEL_FIFOS[@]}" > /dev/null &
# pulseaudio default sink and source volume
latest_vol=""
update_pa() {
    sink_vol="$(painfo sink-volume)"
    sink_mute="$(painfo sink-mute)"
    source_vol="$(painfo source-volume)"
    source_mute="$(painfo source-mute)"
    cur_vol="$sink_vol $sink_mute $source_vol $source_mute"
    if [[ "$cur_vol" != "$latest_vol" ]]; then
        latest_vol="$cur_vol"
        printf "%s\n" "V${cur_vol}" | tee "${PANEL_FIFOS[@]}" > /dev/null
    fi
}
pactl subscribe | grep --line-buffered -E "(sink|source)" | while IFS= read -r line; do
    update_pa
done &
update_pa

jobs -p
wait
