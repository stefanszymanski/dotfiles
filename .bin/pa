#!/usr/bin/env bash

# TODO add commands for retrieving all confiured names/labels.

declare -A CMDS
CMDS=(
    [sink-get-list]="list-sinks"
    [sink-set-volume]="set-sink-volume"
    [sink-set-mute]="set-sink-mute"
    [source-get-list]="list-sources"
    [source-set-volume]="set-source-volume"
    [source-set-mute]="set-source-mute"
)

declare -A NAMES
NAMES=(
    [sink-speakers]="alsa_output.pci-0000_0a_00.1.hdmi-stereo-extra3"
    [sink-headphones]="alsa_output.pci-0000_0c_00.4.analog-stereo"
    [source-mic]="alsa_input.pci-0000_0c_00.4.analog-stereo"
)

_usage() {
    cat <<-END
Usage: pa -t <command> <args...>

Commands:
    get-sink-name     <sink>
    get-sink-label    <sink>
    get-sink-info     <sink>
    get-sink-volume   <sink>
    get-sink-mute     <sink>
    get-source-name   <source>
    get-source-label  <source>
    get-source-info   <source>
    get-source-volume <source>
    get-source-mute   <source>
    set-sink-volume   <sink>   <value>
    set-sink-mute     <sink>   <value>
    set-source-volume <source> <value>
    set-source-mute   <source> <value>

Argument <sink> and <source> are always the custom labels,
except for get-*-label it's the pulseaudio name.

Argument <value> is the same as for \`pactl set-{sink|souce}-{volume|mute}\`.
END
    exit 1
}


# Get the subcommand for pacmd or pactl.
# Usage: cmd [sink|source] [get|set] [list|volume|mute]
# See $CMDS
cmd() {
    printf "%s\n" "${CMDS[${1}-${2}-${3}]}"
}

# Get the name of a sink or source.
# Usage: name [sink|source] [speakers|headphones|mic]
get_name() {
    local name="${NAMES[${1}-${2}]}"
    if [ -z "$name" ]; then
        printf "%s\n" "Invalid label" >&2
        exit 1
    fi
    printf "%s\n" "$name"
}

# Get the label of a sink or source
# Usage: label [sink|source] <name>
get_label() {
    local key name
    for key in "${!NAMES[@]}"; do
        name="${NAMES[$key]}"
        if [ "$name" == "$2" ] && [ "${key:0:${#1}}" == "$1" ]; then
            printf "%s\n" "${key:${#1}+1}"
            return
        fi
    done
    printf "%s\n" "Unconfigured name" >&2
    exit 1
}

get_info() {
    local cmd
    cmd="$(cmd "$1" get list)"
    pacmd "$cmd" | gawk -v subject="<$2>" '
        /^\s+\*?\s+index: [0-9]+$/ {i = $0; target = 0}
        /^\s+name: <[^<>]+>$/ {target = $2 == subject; if (target) print i }
        target == 1 {print $0}'
}

get_volume() {
    get_info "$1" "$2" | gawk '/^\s+volume: / {print $5}'
}

set_volume() {
    pactl "$(cmd "$1" set volume)" "$2" "$3"

}

get_mute() {
    get_info "$1" "$2" | gawk '/^\s+muted: /{print $2}'
}

set_mute() {
    pactl "$(cmd "$1" set mute)" "$2" "$3"
}

case "$1" in
    get-sink-name)
        get_name sink "$2"
        ;;
    get-sink-label)
        get_label sink "$2"
        ;;
    get-sink-info)
        get_info sink "$(get_name sink "$2")"
        ;;
    get-sink-volume)
        get_volume sink "$(get_name sink "$2")"
        ;;
    get-sink-mute)
        get_mute sink "$(get_name sink "$2")"
        ;;
    get-source-name)
        get_name source "$2"
        ;;
    get-source-label)
        get_label source "$2"
        ;;
    get-source-info)
        get_info source "$(get_name source "$2")"
        ;;
    get-source-volume)
        get_volume source "$(get_name source "$2")"
        ;;
    get-source-mute)
        get_mute source "$(get_name source "$2")"
        ;;
    set-sink-volume)
        set_volume sink "$(get_name sink "$2")" "$3"
        ;;
    set-sink-mute)
        set_mute sink "$(get_name sink "$2")" "$3"
        ;;
    set-source-volume)
        set_volume source "$(get_name source "$2")" "$3"
        ;;
    set-source-mute)
        set_mute source "$(get_name source "$2")" "$3"
        ;;
    *)
        _usage
        ;;
esac
