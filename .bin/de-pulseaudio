#!/usr/bin/env bash
#
# Control pulseaudio.
#
# This script is part of my custom desktop environment. It may not work outside
# of this context.
#
# This script requires `jq`, `pactl` and `gawk`.
#
# Available sources and sinks are configured as `pulseaudio.[sink|source].<key>`.
# There must be following properties:
# - `name` is the pulseaudio name of the device.
# - `title` is the display name of the device.
#
# Example toml configuration:
#
#   [pulseaudio]
#       [pulseaudio.sink.speakers]
#       name = "alsa_output.pci-0000_0a_00.1.hdmi-stereo-extra2"
#       title = "Speakers"
#       [pulseaudio.sink.headphones]
#       name = "alsa_output.pci-0000_0c_00.4.analog-stereo"
#       title = "Headphones"
#       [pulseaudio.source.mic]
#       name = "alsa_input.pci-0000_0c_00.4.analog-stereo"
#       title = "Mic"
#
# Author: Stefan Szymanski <stefan.szymanski@posteo.de>
# Date: 2021-01-20
# Licence: MIT

declare -A CMDS
CMDS=(
    [sink-get-list]="list-sinks"
    [sink-set-volume]="set-sink-volume"
    [sink-set-mute]="set-sink-mute"
    [source-get-list]="list-sources"
    [source-set-volume]="set-source-volume"
    [source-set-mute]="set-source-mute"
)

usage() {
    local prog="${0##*/}"
    cat <<-EOF
	Usage: $prog <command> [<args...>]

	Commands:
	  # get sink information
	  $prog get-sink-names
	  $prog get-sink-name     <sink-key>
	  $prog get-sink-key      <sink-name>
	  $prog get-sink-info     <sink-key>
	  $prog get-sink-volume   <sink-key>
	  $prog get-sink-mute     <sink-key>

	  # get source information
	  $prog get-source-names
	  $prog get-source-name   <source-key>
	  $prog get-source-key    <source-name>
	  $prog get-source-info   <source-key>
	  $prog get-source-volume <source-key>
	  $prog get-source-mute   <source-key>

	  # set sink volume or mute state
	  $prog set-sink-volume   <sink-key>   <value>
	  $prog set-sink-mute     <sink-key>   <value>

	  # set source volume or mute state
	  $prog set-source-volume <source-key> <value>
	  $prog set-source-mute   <source-key> <value>

	  # generate input for desktop panel
	  $prog panel

	Argument <value> is the same as for \`pactl set-{sink|souce}-{volume|mute}\`.
	EOF
}

config="$(de-config get "pulseaudio")"
if [ "$?" -gt 0 ]; then
    printf "%s\n" "Configuration not found" >&2
    exit 1
fi

cfg() {
    jq -r "$1" <<< "$config"
}

# Get the subcommand for pacmd or pactl.
# Usage: cmd [sink|source] [get|set] [list|volume|mute]
# See $CMDS
cmd() {
    printf "%s\n" "${CMDS[${1}-${2}-${3}]}"
}

get_keys() {
    cfg ".${1} | keys_unsorted | to_entries[] | .value"
}

# Get the name of a sink or source.
# Usage: get_name [sink|source] <key>
get_name() {
    local name
    name="$(cfg ".${1}.${2}.name")"
    if [ -n "$name" ]; then
        printf "%s\n" "$name"
    else
        printf "%s\n" "Invalid label" >&2
        exit 1
    fi
}

# Get the key of a sink or source
# Usage: get_key [sink|source] <name>
get_key() {
    local name
    name="$(cfg ".${1} | to_entries[] | select(.value.name == \"$2\") | .key")"
    if [ -n "$name" ]; then
        printf "%s\n" "$name"
    else
        printf "%s\n" "Unconfigured name" >&2
        exit 1
    fi
}

get_info() {
    local cmd
    cmd="$(cmd "$1" get list)"
    pacmd "$cmd" | gawk -v subject="<$2>" '
        /^\s+\*?\s+index: [0-9]+$/ {i = $0; target = 0}
        /^\s+name: <[^<>]+>$/ {target = $2 == subject; if (target) print i }
        target == 1 {print $0}'
}

get_volume() {
    get_info "$1" "$2" | gawk '/^\s+volume: / {print $5}'
}

set_volume() {
    pactl "$(cmd "$1" set volume)" "$2" "$3"
}

get_mute() {
    get_info "$1" "$2" | gawk '/^\s+muted: /{print $2}'
}

set_mute() {
    pactl "$(cmd "$1" set mute)" "$2" "$3"
}

get_volume_and_mute() {
    get_info "$1" "$2" | gawk '/^\s+volume: / {print $5} /^\s+muted: /{print $2}' | tr '\n' ' '
}

case "$1" in
    get-sink-keys)
        get_keys sink
        ;;
    get-sink-name)
        get_name sink "$2"
        ;;
    get-sink-key)
        get_key sink "$2"
        ;;
    get-sink-info)
        get_info sink "$(get_name sink "$2")"
        ;;
    get-sink-volume)
        get_volume sink "$(get_name sink "$2")"
        ;;
    get-sink-mute)
        get_mute sink "$(get_name sink "$2")"
        ;;
    get-source-keys)
        get_keys source
        ;;
    get-source-name)
        get_name source "$2"
        ;;
    get-source-key)
        get_key source "$2"
        ;;
    get-source-info)
        get_info source "$(get_name source "$2")"
        ;;
    get-source-volume)
        get_volume source "$(get_name source "$2")"
        ;;
    get-source-mute)
        get_mute source "$(get_name source "$2")"
        ;;
    set-sink-volume)
        set_volume sink "$(get_name sink "$2")" "$3"
        ;;
    set-sink-mute)
        set_mute sink "$(get_name sink "$2")" "$3"
        ;;
    set-source-volume)
        set_volume source "$(get_name source "$2")" "$3"
        ;;
    set-source-mute)
        set_mute source "$(get_name source "$2")" "$3"
        ;;
    panel)
        # generate output for my lemonbar panel
        while read -r key; do
            printf "%s " "$(get_volume_and_mute sink "$key")"
        done <<< "$(cfg '.sink | to_entries[] | .value.name')"
        while read -r key; do
            printf "%s " "$(get_volume_and_mute source "$key")"
        done <<< "$(cfg '.source | to_entries[] | .value.name')"
        ;;
    help)
        usage
        ;;
    *)
        usage >&2
        exit 1
        ;;
esac
