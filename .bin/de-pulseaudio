#!/usr/bin/env bash

# Read and set some pulseaudio settings for sinks and sources.
# 
# Configuration happens through environment variables.
# E.g.: `DE_PULSEAUDIO_SINK_SPEAKERS="alsa_output.analog-stereo"` searches for
# a sink named "alsa_output.analog-stereo" and labels it "speakers".
# Source variables are named respectivly, e.g.: `DE_PULSEAUDIO_SOURCE_MIC="xxx"`.

declare -A CMDS
CMDS=(
    [sink-get-list]="list-sinks"
    [sink-set-volume]="set-sink-volume"
    [sink-set-mute]="set-sink-mute"
    [source-get-list]="list-sources"
    [source-set-volume]="set-source-volume"
    [source-set-mute]="set-source-mute"
)

# read configured sinks and sources from environment variables
declare -A NAMES
while read -r key val; do
    read -r realm name <<< "$(awk -F '_' '{print $3, $4}' <<< "$key")"
    NAMES["${realm,,}-${name,,}"]="$val"
done <<< "$(set | awk -F '=' '/^DE_PULSEAUDIO_(SINK|SOURCE)_.+/ {print $1, $2}')"


_usage() {
    cat <<-END
Usage: pa -t <command> <args...>

Commands:
    get-sink-names
    get-sink-name     <sink-key>
    get-sink-key      <sink-name>
    get-sink-info     <sink-key>
    get-sink-volume   <sink-key>
    get-sink-mute     <sink-key>
    get-source-names
    get-source-name   <source-key>
    get-source-key    <source-name>
    get-source-info   <source-key>
    get-source-volume <source-key>
    get-source-mute   <source-key>
    set-sink-volume   <sink-key>   <value>
    set-sink-mute     <sink-key>   <value>
    set-source-volume <source-key> <value>
    set-source-mute   <source-key> <value>

Argument <value> is the same as for \`pactl set-{sink|souce}-{volume|mute}\`.
END
    exit 1
}


# Get the subcommand for pacmd or pactl.
# Usage: cmd [sink|source] [get|set] [list|volume|mute]
# See $CMDS
cmd() {
    printf "%s\n" "${CMDS[${1}-${2}-${3}]}"
}

get_keys() {
    for key in "${!NAMES[@]}"; do
        [ "${key:0:${#1}}" == "$1" ] && printf "%s\n" "${key:${#1}+1}"
    done
}

# Get the name of a sink or source.
# Usage: get_name [sink|source] <key>
get_name() {
    local name="${NAMES[${1}-${2}]}"
    if [ -z "$name" ]; then
        printf "%s\n" "Invalid label" >&2
        exit 1
    fi
    printf "%s\n" "$name"
}

# Get the key of a sink or source
# Usage: get_key [sink|source] <name>
get_key() {
    local key name
    for key in "${!NAMES[@]}"; do
        name="${NAMES[$key]}"
        if [ "$name" == "$2" ] && [ "${key:0:${#1}}" == "$1" ]; then
            printf "%s\n" "${key:${#1}+1}"
            return
        fi
    done
    printf "%s\n" "Unconfigured name" >&2
    exit 1
}

get_info() {
    local cmd
    cmd="$(cmd "$1" get list)"
    pacmd "$cmd" | gawk -v subject="<$2>" '
        /^\s+\*?\s+index: [0-9]+$/ {i = $0; target = 0}
        /^\s+name: <[^<>]+>$/ {target = $2 == subject; if (target) print i }
        target == 1 {print $0}'
}

get_volume() {
    get_info "$1" "$2" | gawk '/^\s+volume: / {print $5}'
}

set_volume() {
    pactl "$(cmd "$1" set volume)" "$2" "$3"

}

get_mute() {
    get_info "$1" "$2" | gawk '/^\s+muted: /{print $2}'
}

set_mute() {
    pactl "$(cmd "$1" set mute)" "$2" "$3"
}

case "$1" in
    get-sink-keys)
        get_keys sink
        ;;
    get-sink-name)
        get_name sink "$2"
        ;;
    get-sink-key)
        get_key sink "$2"
        ;;
    get-sink-info)
        get_info sink "$(get_name sink "$2")"
        ;;
    get-sink-volume)
        get_volume sink "$(get_name sink "$2")"
        ;;
    get-sink-mute)
        get_mute sink "$(get_name sink "$2")"
        ;;
    get-source-keys)
        get_keys source
        ;;
    get-source-name)
        get_name source "$2"
        ;;
    get-source-key)
        get_key source "$2"
        ;;
    get-source-info)
        get_info source "$(get_name source "$2")"
        ;;
    get-source-volume)
        get_volume source "$(get_name source "$2")"
        ;;
    get-source-mute)
        get_mute source "$(get_name source "$2")"
        ;;
    set-sink-volume)
        set_volume sink "$(get_name sink "$2")" "$3"
        ;;
    set-sink-mute)
        set_mute sink "$(get_name sink "$2")" "$3"
        ;;
    set-source-volume)
        set_volume source "$(get_name source "$2")" "$3"
        ;;
    set-source-mute)
        set_mute source "$(get_name source "$2")" "$3"
        ;;
    *)
        _usage
        ;;
esac
