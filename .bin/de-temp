#!/usr/bin/env bash
#
# Print hardware temperature.
#
# This script is part of my custom desktop environment. It may not work outside
# of this context.
#
# This script requires `jq`.
#
# Devices are configured as `temp.<key>`.
# There must be following properties:
# - `path` is the path to the sysfs file that contains the temperature.
# - `warn` is the warning temperature threshold.
# - `crit` is the critical temperature threshold. 
#
# Example toml configuration:
#
#   [temp]
#       [temp.cpu]
#       path = "/sys/class/hwmon/hwmon2/temp2_input"
#       warn = 65000
#       crit = 80000

# Print temperatures of configured devices.

config="$(de-config get "temp")"
if [ "$?" -gt 0 ]; then
    printf "%s\n" "Configuration not found" >&2
    exit 1
fi

usage() {
    local prog="${0##*/}"
    cat <<-EOF
	Usage: $prog [panel]

	Examples:
	  $prog         # display temperatures
	  $prog panel   # generate input for desktop panel
	EOF
}

cfg() {
    jq -r "$1" <<< "$config"
}

# Convert a raw temperature value to degree celcius.
celcius() {
    read -r temp <&0
    printf "%s" "$((temp/1000))Â°C"
}

case "$1" in
    '')
        while read -r label; do
            printf "%s\n" "$label $(celcius < "$(cfg ".${label}.path")")" 
        done <<< "$(cfg 'keys_unsorted | to_entries[] | .value')"
        ;;
    panel)
        # generate output for my lemonbar panel
        while read -r label; do
            read -r path warn crit <<< "$(cfg ".$label | \"\(.path) \(.warn) \(.crit)\"")"
            temp="$(< "$path")"
            if [ "$crit" != "null" ] && [ "$temp" -ge "$crit" ]; then
                state="crit"
            elif [ "$warn" != "null" ] && [ "$temp" -ge "$warn" ]; then
                state="warn"
            else
                state="norm"
            fi
            printf "%s\n" "$(celcius <<< "$temp") $state" 
        done <<< "$(cfg 'keys_unsorted | to_entries[] | .value')" | tr '\n' $' '
        ;;
    help)
        usage
        ;;
esac
